
~Command:--------------------------------------------------
b) Write command for following:
1. List file names consisting of only digits
Ans:-ls | grep '^[0-9]+$'

2. Display lines from file that having the string "computer" at least thrice.
Ans:-grep -P '(?=(computer.*?){3})' filename

3. Remove all alphabets from the file.
Ans:-sed 's/[a-zA-Z]//g' inputfile > outputfile

4. Display all the lines that are 10 characters long and ends with Ans:-awk 'length($0) == 10 && $0 ~ /\$$/ ' filename

5. Display all the lines that have five words in it.
Ans:-awk 'NF == 5' filename

1. Display all lines of the file that contains only special character in it.
Ans:-

grep '^[^a-zA-Z0-9[:space:]]*$' filename

2. Replace all the occurrence of the word "Good morning" with. "Good evening".
Ans:-

sed -i 's/Good morning/Good evening/g' filename

3.Display name of all the file/sub directories of current directory along with its permission and file type.
Ans:-

ls -l

4.Display all the blank lines with line numbers of the given file
Ans:-

grep -n '^$' filename

5.Display all the lines that have even number of fields.
Ans:-

awk 'NF % 2 == 0' filename

1.To print the line number as well as name of the employee whose salary is more than 20,000.
Ans:-

awk -F, '$3 > 20000 {print NR, $1}' filename.txt

2. Display all the lines that starts with A and ends with $.
Ans:-

grep '^A.*\$$' filename.txt

3. Display 1st word of 10th to 20th line of the file.
Ans:-

sed -n '10,20p' filename.txt | awk '{print $1}'

4. Remove extra spaces all the lines of the file.
Ans:-

sed 's/  */ /g' filename.txt

5. Display all the lines that occur more than once in the given file.
Ans:-
sort filename.txt | uniq -d

1.Write a command to replace 'UIX KERNEL' on line no 10 to 20.
>sed '10,20s/UIX KERNEL/LINUX KERNEL/g' filename.txt

2.Display all blank lines between line 20 and 30 of file test.txt.
>sed -n '20,30{/^$/p}' test.txt

3.To list file names consist of only 4 digits.
>ls | grep '^[0-9]\{4\}$'

4.Display the lines that do not contain "Unix".
>grep -v "Unix" filename.txt

5.Display the lines which are not starting with 2 at the beginning.
>grep -v '^2' filename.txt

6.Display lines beginning either with alphabet or digit from file test.txt.
>grep '^[a-zA-Z0-9]' test.txt

7.Write a command to display all file name containing only digits in a filename.
>ls | grep '^[0-9]*$'

8.Display two lines starting from 4th line of file test.txt.
>sed -n '4,5p' test.txt

9.To display lines beginning with alphabets of a file test.txt.
>grep '^[a-zA-Z]' test.txt

10.To count number of words in line 10 thought 20 of file test.txt.
>sed -n '10,20p' test.txt | wc -w

~awk utilities:--
1. Print the even numbered lines in the data file.
>awk 'NR % 2 == 0' data

2. Print the sums of the fields of every line in file fl.
>awk '{ sum = 0; for (i = 1; i <= NF; i++) sum += $i; print sum }' fl

3. Display those words whose length greater than 10 characters and consist of digits only.
>awk '{ for (i = 1; i <= NF; i++) if (length($i) > 10 && $i ~ /^[0-9]+$/) print $i }' file.txt

4.Write AWK script to print 10 to 1 using while loop.
>BEGIN {
  i = 10;
  while (i >= 1) {
    print i;
    i--;
  }
}

5.Count the total no. of lines in a file.
>awk 'END { print NR }' file

6. Count occurrences of pattern 'UNIX Operating Syatem' in file fl
>awk '/UNIX Operating System/ { count++ } END { print count }' fl

~shell Script --------------------------------------


1.Write a shell script to accept a string from the user and convert all the odd number characters into upper case,
e.g.
Input: tybca
Output: TyBcA
# Read input from the user
echo "Enter a string: "
read input

# Initialize an empty result string
result=""

# Loop through each character in the string
for (( i=0; i<${#input}; i++ )); do
  char=${input:$i:1}
  
  # If the position is odd (i.e., i is even due to 0-based index), convert to uppercase
  if (( i % 2 == 0 )); then
    result+=${char^^}
  else
    result+=$char
  fi
done

# Display the result
echo "Output: $result"


2.Write an awk script to display all the words of a line in reverse order of the given file.
{
  for (i = NF; i > 0; i--) {
    printf "%s ", $i;
  }
  printf "\n";
}


3. Write a shell script to display content of all the regular files of current directory.
Ans:-# Iterate over each regular file in the current directory
for file in $(find . -maxdepth 1 -type f); do
  echo "Displaying content of $file:"
  cat "$file"
  echo # Print a newline for separation between files
done



4.Write a shell script to check whether two files are same or not. If the files are same the second file should be deleted from the directory.(File names should be passed as command line arguments and perform proper validations.)
Ans:-
# Check if exactly two arguments are provided
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 <file1> <file2>"
  exit 1
fi

# Assign command-line arguments to variables
file1="$1"
file2="$2"

# Check if both files exist
if [ ! -f "$file1" ]; then
  echo "Error: '$file1' does not exist."
  exit 1
fi

if [ ! -f "$file2" ]; then
  echo "Error: '$file2' does not exist."
  exit 1
fi

# Compare the files
if cmp -s "$file1" "$file2"; then
  echo "Files are the same. Deleting '$file2'."
  rm "$file2"
else
  echo "Files are different."
fi

5. Write a shell script to count the total number of words and lines of the given file. [Do not use we command.]
Ans:-

#!/bin/bash

# Check if a file name is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 filename"
    exit 1
fi

# Assign the provided file name to a variable
filename="$1"

# Check if the file exists
if [ ! -f "$filename" ]; then
    echo "File not found!"
    exit 1
fi

# Initialize counters
line_count=0
word_count=0

# Read the file line by line
while IFS= read -r line; do
    # Increment the line count
    line_count=$((line_count + 1))
    
    # Count words in the current line
    words_in_line=$(echo "$line" | awk '{print NF}')
    word_count=$((word_count + words_in_line))
done < "$filename"

# Output the results
echo "Lines: $line_count"
echo "Words: $word_count"

6. Write a shell script to reverse a number.
>
echo "Enter a number: "
read number

echo "Reversed Number: $(echo $number | rev)"

7. Write a shell script to enter 10 records in a file
>
file="records.txt"

for i in {1..10}; do
  echo "Enter record #$i: "
  read record
  echo "$record" >> "$file"
done

echo "10 records have been written to $file"
