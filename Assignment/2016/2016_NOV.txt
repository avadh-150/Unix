
~shell Script 

1. Write a shell script to enter the records in a file from keyboard and display the file. Make proper validation.
# Define the file where records will be saved
file_name="records.txt"

# Function to enter records
enter_records() {
    while true; do
        echo -n "Enter a record (or type 'exit' to stop): "
        read record

        # Check if the user wants to exit
        if [ "$record" = "exit" ]; then
            break
        fi

        # Validate that the record is not empty
        if [ -z "$record" ]; then
            echo "Error: Record cannot be empty. Please enter a valid record."
        else
            # Save the valid record to the file
            echo "$record" >> "$file_name"
            echo "Record saved."
        fi
    done
}

# Function to display the contents of the file
display_file() {
    echo "Displaying the contents of $file_name:"
    if [ -s "$file_name" ]; then
        cat "$file_name"
    else
        echo "The file is empty."
    fi
}

# Main script execution
echo "Enter records to be saved in the file '$file_name'."
enter_records

# Display the file contents
display_file

2. Write a shell script to test the length of string is zero or not.
>
# Prompt the user to enter a string
echo -n "Enter a string: "
read input_string

# Check if the string length is zero
if [ -z "$input_string" ]; then
    echo "The string length is zero (empty)."
else
    echo "The string length is not zero. The string is: '$input_string'"
fi

3. Write a shell script that will read a fife name and pattern from the command line and check whether that pattern exist in file and if exist than count number of words in the lines where pattern is found.
>
# Check if both filename and pattern are provided
if [ $# -ne 2 ]; then
    echo "Usage: $0 <filename> <pattern>"
    exit 1
fi

# Assign command line arguments to variables
filename=$1
pattern=$2

# Check if the file exists
if [ ! -f "$filename" ]; then
    echo "Error: File '$filename' not found."
    exit 1
fi

# Search for the pattern and count words in matching lines
grep -n "$pattern" "$filename" | while IFS=: read -r line_number line; do
    word_count=$(echo "$line" | wc -w)
    echo "Line $line_number: $line (Word count: $word_count)"
done

4. Write an AWK script to display number of words and characters in each line.
>awk '{ print "Line", NR, ":", NF, "words,", length($0), "characters" }' filename

5.Write a shell script that will read two numbers from command line and display all even numbers between these two numbers.
# Check if exactly two arguments are provided
if [ $# -ne 2 ]; then
    echo "Usage: $0 <start_number> <end_number>"
    exit 1
fi

# Assign command line arguments to variables
start_number=$1
end_number=$2

# Ensure both arguments are numbers
if ! [[ "$start_number" =~ ^-?[0-9]+$ ]] || ! [[ "$end_number" =~ ^-?[0-9]+$ ]]; then
    echo "Error: Both arguments must be integers."
    exit 1
fi

# Ensure start_number is less than or equal to end_number
if [ "$start_number" -gt "$end_number" ]; then
    echo "Error: Start number must be less than or equal to end number."
    exit 1
fi

echo "Even numbers between $start_number and $end_number:"

# Loop from start_number to end_number
for (( num=start_number; num<=end_number; num++ )); do
    # Check if the number is even
    if [ $((num % 2)) -eq 0 ]; then
        echo "$num"
    fi
done


6. Write an AWK script that will display last word of each line.
>awk '{print $NF}' input_file

7.Write an awk script to reverse individual word of a line from file. e.g. INPUT: hello word OUTPUT: ollehdrow
# reverse_words.awk

function reverse_word(word,    i, reversed) {
    reversed = ""
    for (i = length(word); i > 0; i--) {
        reversed = reversed substr(word, i, 1)
    }
    return reversed
}

{
    reversed_line = ""
    for (i = 1; i <= NF; i++) {
        if (i > 1) {
            reversed_line = reversed_line " "
        }
        reversed_line = reversed_line reverse_word($i)
    }
    print reversed_line
}

8.Write an awk script that will count total number of students in each department using file stud.txt having fields (rno, name, dept, marks). Display total marks department wise.
>awk -F, '
{
    dept_marks[$3] += $4;  # Accumulate total marks by department
    dept_count[$3] += 1;   # Count the number of students by department
}
END {
    for (dept in dept_marks) {
        print "Department: " dept;
        print "Total Marks: " dept_marks[dept];
        print "Total Students: " dept_count[dept];
        print "";  # Print a blank line for readability
    }
}
' stud.txt


~commands :

1.to display the number of process
>ps

2.To concatenate two files f1 and f2 including some text to be inserted from keyboard after content of f1.
=> cat f1 > combined.txt cat >> combined.txt cat f2 >> combined.txt

3.To display all files having last character of digit.
=> ls | grep '[0-9]$'

4.Remove directory tree dir/dir2/dir3 using single command.
 => rm -rf dir/dir2/dir3

5.Write a command to display system processes.
=> ps aux

6.Assign value of 10th positional parameter to a variable x.
=> x=$10

~ Write command using sed or grep:

1.display line 10 to 15 from file x1.
>sed -n '10,15p' x1

2.Display line before a line that contains pattern xyz in f1.txt.
=> grep -B 1 'xyz' f1.txt | head -n -1

3.To display line before a line that contains pattern xyz in f1.txt
=>grep -B 1 'xyz' f1.txt | grep -v 'xyz'

4.Display the lines which are starting with 2 at the beginning.
=> grep '^2' filename

5.To remove all leading space from a file f1.
=> sed 's/^[ \t]*//' f1


~ Write command using awk utility:


1]	Display those words whose length are greater than 10 characters and consist of alphabet only.
=> awk '{for (i=1; i<=NF; i++) if (length($i) > 10 && $i ~ /^[a-zA-Z]+$/) print $i}' filename


2]	Print odd numbers of words in each line.
=> awk '{for (i=1; i<=NF; i+=2) print $i}' filename


3]	Count occurrences of pattern ‘Operating System’ in file f1.
=> grep -o 'Operating System' f1 | wc -l
 

1.Write a command to sort a line of file and also remove a repeated line.
=> sort f1 | uniq > temp && mv temp f1

2.To count number of characters in last line of line X1.
=> tail -n 1 X1 | wc -m
