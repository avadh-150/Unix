
~Commands...:
(1) To delete all special characters from the files fl.txt.
>sed 's/[^a-zA-Z0-9 ]//g' fl.txt > cleaned_fl.txt

(2) Write a command to print first ten line of file.
>head -n 10 filename

3.Write a command to sort a line of file and also remove repeated line.
=> sort f1.txt | uniq

4.Replaces all occurrences of ‘SYBCA’ with ‘TYBCA’ in 5th line of file f1.txt.
=> sed '5s/SYBCA/TYBCA/g' f1.txt

(5) To run a utility x1 at 11:00 AM.
0 11 * * * /usr/local/bin/x1

(6) To display number of processes
>ps

b) Perform following commands on file 'student.txt': 
(1) Write a command to find the word 'Unix OS' ignoring case.
>grep -i 'Unix OS' student.txt

(2) Write a command to display occurrence of string 'BCA'.
>grep -o 'BCA' student.txt | wc -l

(3) Write a command to display line which start with '1'.
>grep '^1' student.txt

(4) Write a command to print last six lines of file.
>tail -n 6 student.txt

(5) Write a command to display line which end with 'India'.
>grep 'India$' student.txt

(c) Write a command using awk utility 
(1) Print even numbers of words in each line
>awk '{ for (i = 1; i <= NF; i++) if (i % 2 == 0) printf "%s ", $i; print "" }' filename

(2) Count occurrences of pattern 'Operating System' in file f1.
>awk '/Operating System/ { count++ } END { print count }' f1

(3) Display those words whose length greater than 4 characters and consist of digits only.
>awk '{ for (i = 1; i <= NF; i++) if (length($i) > 4 && $i ~ /^[0-9]+$/) print $i }' filename



~shell Scripts:

1. Write a script to enter records in a studlist.txt file. The fields are Rollno, Name and Marks.
# Define the file where records will be saved
file_name="studlist.txt"

# Create or clear the file if it exists
> "$file_name"

echo "Enter student records in the format: Rollno, Name, Marks"
echo "Type 'exit' to finish entering records."

# Function to enter records
enter_records() {
    while true; do
        # Prompt the user to enter a record
        echo -n "Enter Rollno, Name, Marks (or type 'exit' to stop): "
        read record

        # Check if the user wants to exit
        if [ "$record" = "exit" ]; then
            break
        fi

        # Validate that the record contains three fields
        IFS=',' read -r rollno name marks <<< "$record"
        if [ -z "$rollno" ] || [ -z "$name" ] || [ -z "$marks" ]; then
            echo "Error: Record must be in the format: Rollno, Name, Marks"
        else
            # Save the valid record to the file
            echo "$record" >> "$file_name"
            echo "Record saved."
        fi
    done
}

# Main script execution
enter_records

echo "Records have been saved to $file_name."


2. Write a shell script to check whether entered file exists or not.
# Prompt the user to enter a filename
echo -n "Enter the filename to check: "
read filename

# Check if the file exists
if [ -e "$filename" ]; then
    echo "The file '$filename' exists."
else
    echo "The file '$filename' does not exist."
fi

3.Write a script to reverse the string. The string should be passed as an argument.
# Check if exactly one argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <string>"
    exit 1
fi

# Read the string from the command line argument
input_string=$1

# Reverse the string
reversed_string=$(echo "$input_string" | rev)

# Display the reversed string
echo "Reversed string: $reversed_string"


4. Write a script which count nos. of the vowels in the entered string.

# Check if exactly one argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <string>"
    exit 1
fi

# Read the string from the command line argument
input_string=$1

# Initialize vowel count
vowel_count=0

# Convert the string to lowercase for easier comparison
lowercase_string=$(echo "$input_string" | tr '[:upper:]' '[:lower:]')

# Loop through each character in the string
for (( i=0; i<${#lowercase_string}; i++ )); do
    char="${lowercase_string:$i:1}"
    # Check if the character is a vowel
    case "$char" in
        a|e|i|o|u)
            vowel_count=$((vowel_count + 1))
            ;;
    esac
done

# Display the count of vowels
echo "Number of vowels: $vowel_count"

5.Create a student-dat file which contain rollno and  marks of five tests. Write an awk script to calculate total and average marks for each student
# AWK script to calculate total and average marks for each student

{
    # Roll number is the first field
    rollno = $1

    # Calculate total marks by summing up the remaining fields
    total = 0
    for (i = 2; i <= NF; i++) {
        total += $i
    }

    # Calculate average marks
    average = total / (NF - 1)

    # Print roll number, total, and average
    printf "Roll No: %s, Total: %d, Average: %.2f\n", rollno, total, average
}

6 .Write a menu driven script to convert the content of file into upper case or lower case based on the users choice.
#!/bin/bash

while true; do
    # Display the menu
    echo "Menu:"
    echo "1. Convert file content to uppercase"
    echo "2. Convert file content to lowercase"
    echo "3. Exit"
    echo -n "Please enter your choice [1-3]: "
    
    # Read user choice
    read choice
    
    case $choice in
        1)
            # Convert to uppercase
            echo -n "Enter the filename to convert to uppercase: "
            read file
            if [ -f "$file" ]; then
                tr '[:lower:]' '[:upper:]' < "$file" > "${file%.txt}_uppercase.txt"
                echo "Content converted to uppercase and saved as ${file%.txt}_uppercase.txt"
            else
                echo "File does not exist."
            fi
            ;;
        2)
            # Convert to lowercase
            echo -n "Enter the filename to convert to lowercase: "
            read file
            if [ -f "$file" ]; then
                tr '[:upper:]' '[:lower:]' < "$file" > "${file%.txt}_lowercase.txt"
                echo "Content converted to lowercase and saved as ${file%.txt}_lowercase.txt"
            else
                echo "File does not exist."
            fi
            ;;
        3)
            # Exit the script
            echo "Exiting..."
            exit 0
            ;;
        *)
            # Invalid choice
            echo "Invalid choice. Please try again."
            ;;
    esac
done


7. Write a command using awk :
(a) To count number of occurance of pattern 'bca' in file fl.
>awk '{ count += gsub(/bca/, "") } END { print count }' fl

(b) To print words whose length is greater than 4 characters and consist of digit only.
>awk '{ for (i = 1; i <= NF; i++) if (length($i) > 4 && $i ~ /^[0-9]+$/) print $i }' fl

(c) To print even numbers of words in each line
>awk '{ for (i = 2; i <= NF; i += 2) print $i }' fl




